```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class ClaimControllerTest {

    @InjectMocks
    private ClaimController claimController;

    @Mock
    private ClaimService claimService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testSubmitClaimSuccess() {
        ClaimRequest claimRequest = new ClaimRequest();
        ClaimResponse claimResponse = new ClaimResponse("Claim Submitted Successfully");
        when(claimService.submitClaim(claimRequest)).thenReturn(claimResponse);

        ResponseEntity<ClaimResponse> response = claimController.submitClaim(claimRequest);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("Claim Submitted Successfully", response.getBody().getMessage());
    }

    @Test
    public void testSubmitClaimFailure() {
        ClaimRequest claimRequest = new ClaimRequest();
        when(claimService.submitClaim(claimRequest)).thenThrow(new RuntimeException("Claim Submission Failed"));

        ResponseEntity<ClaimResponse> response = claimController.submitClaim(claimRequest);

        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
    }

    @Test
    public void testGetClaimDetailsSuccess() {
        Long claimId = 1L;
        ClaimDetails claimDetails = new ClaimDetails(1L, "Test Claim", "Pending");
        when(claimService.getClaimDetails(claimId)).thenReturn(claimDetails);

        ResponseEntity<ClaimDetails> response = claimController.getClaimDetails(claimId);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("Test Claim", response.getBody().getClaimName());
        assertEquals("Pending", response.getBody().getStatus());
    }

    @Test
    public void testGetClaimDetailsNotFound() {
        Long claimId = 1L;
        when(claimService.getClaimDetails(claimId)).thenReturn(null);

        ResponseEntity<ClaimDetails> response = claimController.getClaimDetails(claimId);

        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
    }
}
```